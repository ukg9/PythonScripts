# Function to categorize maxdelqstat
def categorize_delqstat(x):
    if x == 0:
        return 'No delinquency'
    elif 1 <= x <= 30:
        return 'Minor delinquency'
    elif 31 <= x <= 60:
        return 'Moderate delinquency'
    elif 61 <= x <= 90:
        return 'Severe delinquency'
    else:
        return 'Critical delinquency'

# Add a delinquency category column
df['delinquency_category'] = df['maxdelqstat'].apply(categorize_delqstat)

# Create bins and labels for DNBScore
dnb_bins = [100, 150, 200, 250, 300]
dnb_labels = ['(100-149)', '(150-199)', '(200-249)', '(250-300)']
df['DNBScore_group'] = pd.cut(df['DNBScore'], bins=dnb_bins, labels=dnb_labels)

# Create bins and labels for TIBYear
tib_bins = [1990, 2000, 2010, 2015, 2020, 2023]
tib_labels = ['1999 and earlier', '2000-2009', '2010-2014', '2015-2019', '2020-2023']
df['TIBYear_group'] = pd.cut(df['TIBYear'], bins=tib_bins, labels=tib_labels)

# Create bins and labels for NumberOfTrades
trades_bins = [1, 50, 100, 200, 375]
trades_labels = ['1-50', '51-100', '101-200', '201-375']
df['NumberOfTrades_group'] = pd.cut(df['NumberOfTrades'], bins=trades_bins, labels=trades_labels)

# Create bins and labels for TotalEmployees
employees_bins = [0, 5, 10, 50, 100, 20000]
employees_labels = ['0-5', '6-10', '11-50', '51-100', '101-20000']
df['TotalEmployees_group'] = pd.cut(df['TotalEmployees'], bins=employees_bins, labels=employees_labels)

# Create bins and labels for CurrentPadex
padex_bins = [0, 20, 40, 60, 80, 90]
padex_labels = ['0-20', '21-40', '41-60', '61-80', '81-89']
df['CurrentPadex_group'] = pd.cut(df['CurrentPadex'], bins=padex_bins, labels=padex_labels)

# Create a crosstab to summarize counts
count_table = pd.crosstab(
    index=[df['delinquency_category'], df['TIBYear_group'], df['DNBScore_group'], 
           df['NumberOfTrades_group'], df['TotalEmployees_group'], df['CurrentPadex_group']],
    columns='Counts'
)

# Reset the index for better readability
count_table = count_table.reset_index()

# Rename the counts column
count_table.columns = list(count_table.columns[:-1]) + ['Number of Observations']

# Display the count table
print(count_table)
