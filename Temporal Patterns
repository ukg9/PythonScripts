# 1. Seasonality and Trend Decomposition (STL Decomposition)

from statsmodels.tsa.seasonal import seasonal_decompose

# Decompose the time series for one of the variables (e.g., TotalEmployees_D&B)
result = seasonal_decompose(df['TotalEmployees_D&B'], model='additive', period=12)  # Period might be yearly

# Plot the decomposition
result.plot()
plt.show()

#Trend Component: Shows the underlying trend over time.
#Seasonality Component: Highlights repeating patterns, such as yearly cycles.
#Residual Component: Shows the randomness left after accounting for the trend and seasonality.

#2. Autocorrelation and Partial Autocorrelation (ACF and PACF)
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Plot the Autocorrelation Function (ACF) and Partial Autocorrelation Function (PACF) for a variable
plt.figure(figsize=(10, 5))

# ACF plot for 'NumberOfTrades_D&B'
plot_acf(df['NumberOfTrades_D&B'], lags=40, alpha=0.05)
plt.title('Autocorrelation Function (ACF) - NumberOfTrades_D&B')
plt.show()

# PACF plot for 'NumberOfTrades_D&B'
plot_pacf(df['NumberOfTrades_D&B'], lags=40, alpha=0.05)
plt.title('Partial Autocorrelation Function (PACF) - NumberOfTrades_D&B')
plt.show()

#ACF: Shows how each value in the time series is correlated with its previous values at different lags.
#PACF: Shows the direct correlation between the time series and its lagged values, removing the influence of intermediate lags.

#3. Time Series Forecasting (ARIMA/SARIMA)

from statsmodels.tsa.arima.model import ARIMA

# Fit ARIMA model (order needs to be tuned for best fit)
model = ARIMA(df['TotalEmployees_D&B'], order=(1, 1, 1))
model_fit = model.fit()

# Forecast the next 12 periods
forecast = model_fit.forecast(steps=12)

# Plot the original data with the forecast
plt.figure(figsize=(10, 6))
df['TotalEmployees_D&B'].plot(label='Original')
forecast.plot(label='Forecast', linestyle='--')
plt.title('ARIMA Forecast for TotalEmployees_D&B')
plt.xlabel('Year')
plt.ylabel('Values')
plt.legend()
plt.show()

#ARIMA: Models the data and forecasts future values based on patterns in past data.
#SARIMA: Extends ARIMA by considering seasonal patterns in the data.

#4. Cross-Correlation (CCF)

from statsmodels.tsa.stattools import ccf

# Cross-correlation between 'TotalEmployees_D&B' and 'NumberOfTrades_D&B'
cross_corr = ccf(df['TotalEmployees_D&B'], df['NumberOfTrades_D&B'])

plt.figure(figsize=(10, 6))
plt.plot(cross_corr)
plt.title('Cross-Correlation between TotalEmployees_D&B and NumberOfTrades_D&B')
plt.xlabel('Lag')
plt.ylabel('Cross-Correlation')
plt.show()

#Cross-Correlation: Measures how one time series is correlated with another at different time lags.
